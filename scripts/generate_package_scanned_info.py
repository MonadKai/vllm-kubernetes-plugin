#!/usr/bin/env python3
"""
Generate package scanned information for the vllm kubernetes plugin
"""

import json
import sys
from pathlib import Path
from typing import List
from pydantic import BaseModel

# Add the project root to sys.path to allow imports
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from scripts.utils import (
    get_package_version,
    find_logger_modules,
    find_methods_with_request_id,
    normalized_package_full_name,
)


class PackageScannedInfo(BaseModel):
    package_name: str
    package_version: str
    modules_with_logger: List[str]
    methods_with_request_id: List[str]


def generate_package_config(package_name: str) -> PackageScannedInfo:
    """Generate package configuration by scanning the codebase"""
    print(f"Scanning {package_name} codebase for configuration...")

    package_version = get_package_version(package_name)
    print(f"Detected {package_name} version: {package_version}")

    # Find logger modules
    modules_with_logger = find_logger_modules(package_name)
    print(f"Found {len(modules_with_logger)} modules containing loggers")

    # Find methods with request_id parameters
    methods_with_request_id = find_methods_with_request_id(
        package_name, ignore_init=True
    )
    print(
        f"Found {len(methods_with_request_id)} methods containing request_id/req_id parameters"
    )

    # Build configuration
    config = PackageScannedInfo(
        package_name=package_name,
        package_version=package_version,
        modules_with_logger=modules_with_logger,
        methods_with_request_id=methods_with_request_id,
    )

    return config


def write_python_config_file(config: PackageScannedInfo, output_path: Path) -> None:
    """Write configuration as Python module in the format matching vllm_mappings.py"""
    package_name = config.package_name

    with open(output_path, "w", encoding="utf-8") as f:
        f.write("# -*- coding: utf-8 -*-\n")
        f.write(f'"""{package_name} codebase scanned information"""\n')
        f.write(
            "# This file is automatically generated by scripts/generate_package_scanned_info.py, do not modify manually\n\n"
        )
        f.write(f"MODULES_WITH_LOGGER = {repr(config.modules_with_logger)}\n")
        f.write(f"METHODS_WITH_REQUEST_ID = {repr(config.methods_with_request_id)}\n")


def write_json_config_file(config: PackageScannedInfo, output_path: Path) -> None:
    """Write configuration as JSON file"""
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(config.model_dump(), f, indent=2, ensure_ascii=False)


def main():
    """Main function"""
    print("=== Package Configuration Generator ===")

    # You can specify multiple packages here
    package_names = [
        "vllm",
        "lmcache"
    ]  # Add more packages as needed: ["vllm", "transformers", "torch"]
    # 演示多包支持：
    # package_names = ["vllm", "torch"] # 添加 torch 作为示例

    # Ensure output directories exist
    project_root = Path(__file__).parent.parent
    config_dir = (
        project_root / "src" / "vllm_kubernetes_plugin" / "package_scanned_info"
    )
    test_output_dir = project_root / "scripts" / "test_output"

    config_dir.mkdir(parents=True, exist_ok=True)
    test_output_dir.mkdir(parents=True, exist_ok=True)

    generated_configs = []

    for package_name in package_names:
        print(f"\n--- Processing {package_name} ---")

        # Generate configuration
        config = generate_package_config(package_name)
        generated_configs.append(config)

        package_full_name = normalized_package_full_name(
            package_name, config.package_version
        )

        # Write Python configuration file
        config_file = config_dir / f"{package_full_name}.py"
        write_python_config_file(config, config_file)

        # Write JSON file for validation (not included in package)
        json_file = test_output_dir / f"{package_full_name}.json"
        write_json_config_file(config, json_file)

        print(f"✓ Generated: {config_file}")
        print(f"✓ JSON validation: {json_file}")
        print(f"✓ Package name: {config.package_name}")
        print(f"✓ Package version: {config.package_version}")
        print(f"✓ Logger modules: {len(config.modules_with_logger)}")
        print(f"✓ Request ID methods: {len(config.methods_with_request_id)}")

    print(f"\n=== Configuration Generated Successfully ===")
    print(f"- Config directory: {config_dir}")
    print(f"- Test output: {test_output_dir}")
    print(f"- Total packages processed: {len(package_names)}")

    for config in generated_configs:
        print(
            f"  • {config.package_name} v{config.package_version}: "
            f"{len(config.modules_with_logger)} logger modules, "
            f"{len(config.methods_with_request_id)} request ID methods"
        )


if __name__ == "__main__":
    main()
